/*
 * SPDX-FileCopyrightText: 2025 Stalwart Labs LLC <hello@stalw.art>
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 */

use criterion::{criterion_group, criterion_main, Criterion};

pub(crate) enum Word {
    AddFlag,
    AddHeader,
    Address,
    Addresses,
    All,
    AllOf,
    AnyChild,
    AnyOf,
    Body,
    Break,
    ByMode,
    ByTimeAbsolute,
    ByTimeRelative,
    ByTrace,
    Comparator,
    Contains,
    Content,
    ContentType,
    Convert,
    Copy,
    Count,
    Create,
    CurrentDate,
    Date,
    Days,
    DeleteHeader,
    Detail,
    Discard,
    Domain,
    Duplicate,
    Else,
    ElsIf,
    Enclose,
    EncodeUrl,
    Envelope,
    Environment,
    Ereject,
    Error,
    Exists,
    ExtractText,
    False,
    Fcc,
    FileInto,
    First,
    Flags,
    ForEveryPart,
    From,
    Global,
    Handle,
    HasFlag,
    Header,
    Headers,
    If,
    Ihave,
    Importance,
    Include,
    Index,
    Is,
    Keep,
    Last,
    Length,
    List,
    LocalPart,
    Lower,
    LowerFirst,
    MailboxExists,
    MailboxId,
    MailboxIdExists,
    Matches,
    Message,
    Metadata,
    MetadataExists,
    Mime,
    Name,
    Not,
    Notify,
    NotifyMethodCapability,
    Once,
    Optional,
    Options,
    OriginalZone,
    Over,
    Param,
    Percent,
    Personal,
    QuoteRegex,
    QuoteWildcard,
    Raw,
    Redirect,
    Regex,
    Reject,
    RemoveFlag,
    Replace,
    Require,
    Ret,
    Return,
    Seconds,
    ServerMetadata,
    ServerMetadataExists,
    Set,
    SetFlag,
    Size,
    SpamTest,
    SpecialUse,
    SpecialUseExists,
    Stop,
    String,
    Subject,
    Subtype,
    Text,
    True,
    Type,
    Under,
    UniqueId,
    Upper,
    UpperFirst,
    User,
    Vacation,
    ValidExtList,
    ValidNotifyMethod,
    Value,
    VirusTest,
    Zone,

    // Extensions
    Eval,
    Local,
    While,
    Let,
    Continue,
}

pub(crate) static WORDS: phf::Map<&'static str, Word> = phf::phf_map! {
    "addflag" => Word::AddFlag,
    "addheader" => Word::AddHeader,
    "address" => Word::Address,
    "addresses" => Word::Addresses,
    "all" => Word::All,
    "allof" => Word::AllOf,
    "anychild" => Word::AnyChild,
    "anyof" => Word::AnyOf,
    "body" => Word::Body,
    "break" => Word::Break,
    "bymode" => Word::ByMode,
    "bytimeabsolute" => Word::ByTimeAbsolute,
    "bytimerelative" => Word::ByTimeRelative,
    "bytrace" => Word::ByTrace,
    "comparator" => Word::Comparator,
    "contains" => Word::Contains,
    "content" => Word::Content,
    "contenttype" => Word::ContentType,
    "convert" => Word::Convert,
    "copy" => Word::Copy,
    "count" => Word::Count,
    "create" => Word::Create,
    "currentdate" => Word::CurrentDate,
    "date" => Word::Date,
    "days" => Word::Days,
    "deleteheader" => Word::DeleteHeader,
    "detail" => Word::Detail,
    "discard" => Word::Discard,
    "domain" => Word::Domain,
    "duplicate" => Word::Duplicate,
    "else" => Word::Else,
    "elsif" => Word::ElsIf,
    "enclose" => Word::Enclose,
    "encodeurl" => Word::EncodeUrl,
    "envelope" => Word::Envelope,
    "environment" => Word::Environment,
    "ereject" => Word::Ereject,
    "error" => Word::Error,
    "exists" => Word::Exists,
    "extracttext" => Word::ExtractText,
    "false" => Word::False,
    "fcc" => Word::Fcc,
    "fileinto" => Word::FileInto,
    "first" => Word::First,
    "flags" => Word::Flags,
    "foreverypart" => Word::ForEveryPart,
    "from" => Word::From,
    "global" => Word::Global,
    "handle" => Word::Handle,
    "hasflag" => Word::HasFlag,
    "header" => Word::Header,
    "headers" => Word::Headers,
    "if" => Word::If,
    "ihave" => Word::Ihave,
    "importance" => Word::Importance,
    "include" => Word::Include,
    "index" => Word::Index,
    "is" => Word::Is,
    "keep" => Word::Keep,
    "last" => Word::Last,
    "length" => Word::Length,
    "list" => Word::List,
    "localpart" => Word::LocalPart,
    "lower" => Word::Lower,
    "lowerfirst" => Word::LowerFirst,
    "mailboxexists" => Word::MailboxExists,
    "mailboxid" => Word::MailboxId,
    "mailboxidexists" => Word::MailboxIdExists,
    "matches" => Word::Matches,
    "message" => Word::Message,
    "metadata" => Word::Metadata,
    "metadataexists" => Word::MetadataExists,
    "mime" => Word::Mime,
    "name" => Word::Name,
    "not" => Word::Not,
    "notify" => Word::Notify,
    "notify_method_capability" => Word::NotifyMethodCapability,
    "once" => Word::Once,
    "optional" => Word::Optional,
    "options" => Word::Options,
    "originalzone" => Word::OriginalZone,
    "over" => Word::Over,
    "param" => Word::Param,
    "percent" => Word::Percent,
    "personal" => Word::Personal,
    "quoteregex" => Word::QuoteRegex,
    "quotewildcard" => Word::QuoteWildcard,
    "raw" => Word::Raw,
    "redirect" => Word::Redirect,
    "regex" => Word::Regex,
    "reject" => Word::Reject,
    "removeflag" => Word::RemoveFlag,
    "replace" => Word::Replace,
    "require" => Word::Require,
    "ret" => Word::Ret,
    "return" => Word::Return,
    "seconds" => Word::Seconds,
    "servermetadata" => Word::ServerMetadata,
    "servermetadataexists" => Word::ServerMetadataExists,
    "set" => Word::Set,
    "setflag" => Word::SetFlag,
    "size" => Word::Size,
    "spamtest" => Word::SpamTest,
    "specialuse" => Word::SpecialUse,
    "specialuse_exists" => Word::SpecialUseExists,
    "stop" => Word::Stop,
    "string" => Word::String,
    "subject" => Word::Subject,
    "subtype" => Word::Subtype,
    "text" => Word::Text,
    "true" => Word::True,
    "type" => Word::Type,
    "under" => Word::Under,
    "uniqueid" => Word::UniqueId,
    "upper" => Word::Upper,
    "upperfirst" => Word::UpperFirst,
    "user" => Word::User,
    "vacation" => Word::Vacation,
    "valid_ext_list" => Word::ValidExtList,
    "valid_notify_method" => Word::ValidNotifyMethod,
    "value" => Word::Value,
    "virustest" => Word::VirusTest,
    "zone" => Word::Zone,
    "eval" => Word::Eval,
    "local" => Word::Local,
    "while" => Word::While,
    "let" => Word::Let,
    "continue" => Word::Continue,
};

pub(crate) static CHARSETS: phf::Map<&'static str, u32> = phf::phf_map! {
"koi8_r" => 35,
"windows_1253" => 97,
"windows_1257" => 114,
"iso_8859_10" => 69,
"windows_1251" => 70,
"ks_c_5601_1989" => 64,
"cswindows1255" => 71,
"windows_1254" => 78,
"csiso885916" => 66,
"iso_8859_10:1992" => 87,
"iso_8859_8:1988" => 47,
"latin2" => 30,
"csiso885914" => 50,
"cstis620" => 88,
"iso_8859_5:1988" => 59,
"windows_1250" => 94,
"csisolatin5" => 108,
"utf_16" => 116,
"ms_kanji" => 133,
"iso_ir_148" => 22,
"iso_8859_2" => 118,
"l6" => 13,
"csiso2022jp" => 143,
"latin_9" => 25,
"l2" => 27,
"csisolatin3" => 119,
"shift_jis" => 28,
"cswindows1254" => 63,
"cspc850multilingual" => 148,
"cswindows1258" => 58,
"l10" => 38,
"iso_ir_100" => 89,
"cp850" => 20,
"iso_ir_101" => 32,
"iso_celtic" => 23,
"iso_8859_7:1987" => 136,
"latin8" => 3,
"latin4" => 6,
"csisolatin4" => 105,
"utf_16le" => 113,
"csisolatingreek" => 103,
"tis_620" => 45,
"euc_kr" => 24,
"elot_928" => 46,
"iso_ir_127" => 142,
"iso_ir_199" => 65,
"utf_16be" => 117,
"cswindows1256" => 79,
"iso_2022_jp" => 126,
"ms936" => 138,
"gb18030" => 49,
"extended_unix_code_packed_format_for_japanese" => 125,
"iso_8859_9" => 80,
"iso_8859_5" => 68,
"l4" => 4,
"l5" => 8,
"iso_8859_1:1987" => 95,
"latin6" => 15,
"latin1" => 1,
"l3" => 19,
"windows_936" => 93,
"cp936" => 26,
"csiso885913" => 76,
"ecma_114" => 130,
"big5" => 16,
"cswindows1251" => 54,
"greek" => 10,
"iso_8859_9:1989" => 81,
"csutf16le" => 115,
"cyrillic" => 34,
"iso_ir_144" => 29,
"850" => 42,
"l8" => 2,
"iso_8859_7" => 134,
"gbk" => 7,
"iso_8859_16" => 62,
"iso_8859_15" => 53,
"gb2312" => 82,
"windows_1256" => 91,
"iso_8859_3" => 100,
"windows_1252" => 109,
"iso_ir_109" => 75,
"866" => 31,
"cswindows874" => 67,
"cp819" => 14,
"euc_jp" => 33,
"iso_8859_16:2001" => 40,
"cswindows1252" => 98,
"cswindows1257" => 107,
"csmacintosh" => 139,
"csgbk" => 5,
"latin5" => 9,
"iso_8859_11" => 37,
"ibm850" => 141,
"latin3" => 21,
"arabic" => 127,
"windows_874" => 90,
"iso_8859_3:1988" => 77,
"ecma_118" => 121,
"iso_8859_2:1987" => 131,
"mac" => 110,
"l1" => 0,
"csgb18030" => 106,
"iso_ir_126" => 92,
"cskoi8u" => 145,
"csiso885915" => 56,
"macintosh" => 146,
"iso_8859_6:1987" => 111,
"cswindows1253" => 86,
"latin10" => 41,
"iso_8859_13" => 72,
"iso_8859_4" => 55,
"koi8_u" => 104,
"csbig5" => 12,
"csisolatin2" => 132,
"iso_8859_6" => 85,
"windows_1255" => 83,
"cseucpkdfmtjapanese" => 144,
"iso_8859_14:1998" => 44,
"csisolatin6" => 112,
"iso_8859_8" => 43,
"iso_ir_157" => 123,
"ibm819" => 135,
"asmo_708" => 147,
"csutf16be" => 122,
"windows_1258" => 73,
"iso_ir_110" => 61,
"ks_c_5601_1987" => 99,
"csshiftjis" => 18,
"csutf16" => 120,
"utf_7" => 140,
"csisolatin1" => 96,
"iso_8859_4:1988" => 52,
"cskoi8r" => 51,
"csisolatinarabic" => 101,
"csisolatincyrillic" => 102,
"cswindows1250" => 84,
"greek8" => 11,
"csisolatinhebrew" => 124,
"hebrew" => 60,
"iso_8859_1" => 36,
"iso_ir_138" => 39,
"csibm866" => 74,
"iso_ir_226" => 128,
"csutf7" => 129,
"cseuckr" => 57,
"iso_8859_14" => 48,
"cp866" => 17,
"ibm866" => 137,

};

fn lookup_words(key: &[u8]) -> Option<Word> {
    hashify::map! { key,
    "addflag" => Word::AddFlag,
    "addheader" => Word::AddHeader,
    "address" => Word::Address,
    "addresses" => Word::Addresses,
    "all" => Word::All,
    "allof" => Word::AllOf,
    "anychild" => Word::AnyChild,
    "anyof" => Word::AnyOf,
    "body" => Word::Body,
    "break" => Word::Break,
    "bymode" => Word::ByMode,
    "bytimeabsolute" => Word::ByTimeAbsolute,
    "bytimerelative" => Word::ByTimeRelative,
    "bytrace" => Word::ByTrace,
    "comparator" => Word::Comparator,
    "contains" => Word::Contains,
    "content" => Word::Content,
    "contenttype" => Word::ContentType,
    "convert" => Word::Convert,
    "copy" => Word::Copy,
    "count" => Word::Count,
    "create" => Word::Create,
    "currentdate" => Word::CurrentDate,
    "date" => Word::Date,
    "days" => Word::Days,
    "deleteheader" => Word::DeleteHeader,
    "detail" => Word::Detail,
    "discard" => Word::Discard,
    "domain" => Word::Domain,
    "duplicate" => Word::Duplicate,
    "else" => Word::Else,
    "elsif" => Word::ElsIf,
    "enclose" => Word::Enclose,
    "encodeurl" => Word::EncodeUrl,
    "envelope" => Word::Envelope,
    "environment" => Word::Environment,
    "ereject" => Word::Ereject,
    "error" => Word::Error,
    "exists" => Word::Exists,
    "extracttext" => Word::ExtractText,
    "false" => Word::False,
    "fcc" => Word::Fcc,
    "fileinto" => Word::FileInto,
    "first" => Word::First,
    "flags" => Word::Flags,
    "foreverypart" => Word::ForEveryPart,
    "from" => Word::From,
    "global" => Word::Global,
    "handle" => Word::Handle,
    "hasflag" => Word::HasFlag,
    "header" => Word::Header,
    "headers" => Word::Headers,
    "if" => Word::If,
    "ihave" => Word::Ihave,
    "importance" => Word::Importance,
    "include" => Word::Include,
    "index" => Word::Index,
    "is" => Word::Is,
    "keep" => Word::Keep,
    "last" => Word::Last,
    "length" => Word::Length,
    "list" => Word::List,
    "localpart" => Word::LocalPart,
    "lower" => Word::Lower,
    "lowerfirst" => Word::LowerFirst,
    "mailboxexists" => Word::MailboxExists,
    "mailboxid" => Word::MailboxId,
    "mailboxidexists" => Word::MailboxIdExists,
    "matches" => Word::Matches,
    "message" => Word::Message,
    "metadata" => Word::Metadata,
    "metadataexists" => Word::MetadataExists,
    "mime" => Word::Mime,
    "name" => Word::Name,
    "not" => Word::Not,
    "notify" => Word::Notify,
    "notify_method_capability" => Word::NotifyMethodCapability,
    "once" => Word::Once,
    "optional" => Word::Optional,
    "options" => Word::Options,
    "originalzone" => Word::OriginalZone,
    "over" => Word::Over,
    "param" => Word::Param,
    "percent" => Word::Percent,
    "personal" => Word::Personal,
    "quoteregex" => Word::QuoteRegex,
    "quotewildcard" => Word::QuoteWildcard,
    "raw" => Word::Raw,
    "redirect" => Word::Redirect,
    "regex" => Word::Regex,
    "reject" => Word::Reject,
    "removeflag" => Word::RemoveFlag,
    "replace" => Word::Replace,
    "require" => Word::Require,
    "ret" => Word::Ret,
    "return" => Word::Return,
    "seconds" => Word::Seconds,
    "servermetadata" => Word::ServerMetadata,
    "servermetadataexists" => Word::ServerMetadataExists,
    "set" => Word::Set,
    "setflag" => Word::SetFlag,
    "size" => Word::Size,
    "spamtest" => Word::SpamTest,
    "specialuse" => Word::SpecialUse,
    "specialuse_exists" => Word::SpecialUseExists,
    "stop" => Word::Stop,
    "string" => Word::String,
    "subject" => Word::Subject,
    "subtype" => Word::Subtype,
    "text" => Word::Text,
    "true" => Word::True,
    "type" => Word::Type,
    "under" => Word::Under,
    "uniqueid" => Word::UniqueId,
    "upper" => Word::Upper,
    "upperfirst" => Word::UpperFirst,
    "user" => Word::User,
    "vacation" => Word::Vacation,
    "valid_ext_list" => Word::ValidExtList,
    "valid_notify_method" => Word::ValidNotifyMethod,
    "value" => Word::Value,
    "virustest" => Word::VirusTest,
    "zone" => Word::Zone,
    "eval" => Word::Eval,
    "local" => Word::Local,
    "while" => Word::While,
    "let" => Word::Let,
    "continue" => Word::Continue,
    }
}

fn lookup_charsets(key: &[u8]) -> Option<u32> {
    hashify::map! {
    key,
    "koi8_r" => 35,
    "windows_1253" => 97,
    "windows_1257" => 114,
    "iso_8859_10" => 69,
    "windows_1251" => 70,
    "ks_c_5601_1989" => 64,
    "cswindows1255" => 71,
    "windows_1254" => 78,
    "csiso885916" => 66,
    "iso_8859_10:1992" => 87,
    "iso_8859_8:1988" => 47,
    "latin2" => 30,
    "csiso885914" => 50,
    "cstis620" => 88,
    "iso_8859_5:1988" => 59,
    "windows_1250" => 94,
    "csisolatin5" => 108,
    "utf_16" => 116,
    "ms_kanji" => 133,
    "iso_ir_148" => 22,
    "iso_8859_2" => 118,
    "l6" => 13,
    "csiso2022jp" => 143,
    "latin_9" => 25,
    "l2" => 27,
    "csisolatin3" => 119,
    "shift_jis" => 28,
    "cswindows1254" => 63,
    "cspc850multilingual" => 148,
    "cswindows1258" => 58,
    "l10" => 38,
    "iso_ir_100" => 89,
    "cp850" => 20,
    "iso_ir_101" => 32,
    "iso_celtic" => 23,
    "iso_8859_7:1987" => 136,
    "latin8" => 3,
    "latin4" => 6,
    "csisolatin4" => 105,
    "utf_16le" => 113,
    "csisolatingreek" => 103,
    "tis_620" => 45,
    "euc_kr" => 24,
    "elot_928" => 46,
    "iso_ir_127" => 142,
    "iso_ir_199" => 65,
    "utf_16be" => 117,
    "cswindows1256" => 79,
    "iso_2022_jp" => 126,
    "ms936" => 138,
    "gb18030" => 49,
    "extended_unix_code_packed_format_for_japanese" => 125,
    "iso_8859_9" => 80,
    "iso_8859_5" => 68,
    "l4" => 4,
    "l5" => 8,
    "iso_8859_1:1987" => 95,
    "latin6" => 15,
    "latin1" => 1,
    "l3" => 19,
    "windows_936" => 93,
    "cp936" => 26,
    "csiso885913" => 76,
    "ecma_114" => 130,
    "big5" => 16,
    "cswindows1251" => 54,
    "greek" => 10,
    "iso_8859_9:1989" => 81,
    "csutf16le" => 115,
    "cyrillic" => 34,
    "iso_ir_144" => 29,
    "850" => 42,
    "l8" => 2,
    "iso_8859_7" => 134,
    "gbk" => 7,
    "iso_8859_16" => 62,
    "iso_8859_15" => 53,
    "gb2312" => 82,
    "windows_1256" => 91,
    "iso_8859_3" => 100,
    "windows_1252" => 109,
    "iso_ir_109" => 75,
    "866" => 31,
    "cswindows874" => 67,
    "cp819" => 14,
    "euc_jp" => 33,
    "iso_8859_16:2001" => 40,
    "cswindows1252" => 98,
    "cswindows1257" => 107,
    "csmacintosh" => 139,
    "csgbk" => 5,
    "latin5" => 9,
    "iso_8859_11" => 37,
    "ibm850" => 141,
    "latin3" => 21,
    "arabic" => 127,
    "windows_874" => 90,
    "iso_8859_3:1988" => 77,
    "ecma_118" => 121,
    "iso_8859_2:1987" => 131,
    "mac" => 110,
    "l1" => 0,
    "csgb18030" => 106,
    "iso_ir_126" => 92,
    "cskoi8u" => 145,
    "csiso885915" => 56,
    "macintosh" => 146,
    "iso_8859_6:1987" => 111,
    "cswindows1253" => 86,
    "latin10" => 41,
    "iso_8859_13" => 72,
    "iso_8859_4" => 55,
    "koi8_u" => 104,
    "csbig5" => 12,
    "csisolatin2" => 132,
    "iso_8859_6" => 85,
    "windows_1255" => 83,
    "cseucpkdfmtjapanese" => 144,
    "iso_8859_14:1998" => 44,
    "csisolatin6" => 112,
    "iso_8859_8" => 43,
    "iso_ir_157" => 123,
    "ibm819" => 135,
    "asmo_708" => 147,
    "csutf16be" => 122,
    "windows_1258" => 73,
    "iso_ir_110" => 61,
    "ks_c_5601_1987" => 99,
    "csshiftjis" => 18,
    "csutf16" => 120,
    "utf_7" => 140,
    "csisolatin1" => 96,
    "iso_8859_4:1988" => 52,
    "cskoi8r" => 51,
    "csisolatinarabic" => 101,
    "csisolatincyrillic" => 102,
    "cswindows1250" => 84,
    "greek8" => 11,
    "csisolatinhebrew" => 124,
    "hebrew" => 60,
    "iso_8859_1" => 36,
    "iso_ir_138" => 39,
    "csibm866" => 74,
    "iso_ir_226" => 128,
    "csutf7" => 129,
    "cseuckr" => 57,
    "iso_8859_14" => 48,
    "cp866" => 17,
    "ibm866" => 137,
    }
}

fn bench_hashmaps(c: &mut Criterion) {
    let keys: Vec<String> = WORDS.keys().map(|s| s.to_string()).collect();

    println!("Words: {:?}", WORDS.len());

    let mut group = c.benchmark_group("hashmap_comparison_1");

    group.bench_function("phf_1", |b| {
        b.iter(|| {
            for key in &keys {
                WORDS.get(key).unwrap();
            }
        })
    });

    group.bench_function("hashify_2", |b| {
        b.iter(|| {
            for key in &keys {
                lookup_words(key.as_bytes()).unwrap();
            }
        })
    });

    group.finish();

    let keys: Vec<String> = CHARSETS.keys().map(|s| s.to_string()).collect();

    println!("Charsets: {:?}", CHARSETS.len());

    let mut group = c.benchmark_group("hashmap_comparison_2");

    group.bench_function("phf_2", |b| {
        b.iter(|| {
            for key in &keys {
                CHARSETS.get(key).unwrap();
            }
        })
    });

    group.bench_function("hashify_2", |b| {
        b.iter(|| {
            for key in &keys {
                lookup_charsets(key.as_bytes()).unwrap();
            }
        })
    });

    group.finish();
}

criterion_group!(benches, bench_hashmaps);
criterion_main!(benches);
